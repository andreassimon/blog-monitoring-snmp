<html>
  <head>
    <title>Capturing SNMP Values During Load Tests</title>
    <link rel="stylesheet" type="text/css" href="./style.css" />
  </head>
<body>

After [capturing and analyzing response times](http://andreas-simon.blogspot.de/2014/03/analyzing-jmeter-results-with-r.html) I need some monitoring data to correlate the results to.
As far as I could find out, JMeter does not provide means to capture system attributes like CPU, memory, and I/O utilization.
So I set off to build something on my own.
My application servers [run a SNMP daemon](http://andreas-simon.blogspot.de/2014/02/setting-up-zenoss-for-monitoring-grails.html).
It seemed to obvious to query system data via the available service.

## Preparation

In order to query SNMP data I had to install some Debian packages:

<div class="code_block">
<div class="code_header">/install-packages.sh</div>
<%= `cat install-packages.sh | ./extract_region.rb all | grep --invert-match "region" | pygmentize -l bash -f html` %>
</div>

The `snmp` package provides the required command line tools, especially `snmpget` and `snmpwalk`.
`snmp-mibs-downloader` provides [Management Information Base](http://en.wikipedia.org/wiki/Management_information_base) files in the directory `/usr/share/snmp/mibs` SNMP data structures.

SNMP structures the management information in a numerical, hierarchical format that is very hard to reason about:

<div class="code_block">
<div class="code_header">/snmpwalk.sh</div>
<%= `cat snmpwalk.sh | ./extract_region.rb head | grep --invert-match "region" | pygmentize -l bash -f html` %>
</div>

The Management Information Base provides metadata that provide human-readable names and categories.
To activate MIBs I have to set the `MIBS` environment variable:

<div class="code_block">
<div class="code_header">/capture-snmp.sh</div>
<%= `cat capture-snmp.sh | ./extract_region.rb mibs | grep --invert-match "region" | pygmentize -l bash -f html` %>
</div>

Afterwords, the output is easier to understand:

<div class="code_block">
<div class="code_header">/snmpwalk-mibs.sh</div>
<%= `cat snmpwalk-mibs.sh | ./extract_region.rb head | grep --invert-match "region" | pygmentize -l bash -f html` %>
</div>

In addition, there are categories of values that can be queried, e.g. `systemStats` or `memory`:

<div class="code_block">
<div class="code_header">/capture-snmp.sh</div>
<%= `cat capture-snmp.sh | ./extract_region.rb category-walks | grep --invert-match "region" | pygmentize -l bash -f html` %>
</div>

<div class="code_block">
<div class="code_header">/10.0.0.3.systemStats.snmpwalk</div>
<%= `cat 10.0.0.3.systemStats.snmpwalk | pygmentize -l bash -f html` %>
</div>

<div class="code_block">
<div class="code_header">/10.0.0.3.memory.snmpwalk</div>
<%= `cat 10.0.0.3.memory.snmpwalk | pygmentize -l bash -f html` %>
</div>

## Capturing Data Regularly

<div class="code_block">
<div class="code_header">/capture-snmp-regularly.sh</div>
<%= `cat capture-snmp-regularly.sh | ./extract_region.rb all | grep --invert-match "region" | pygmentize -l bash -f html` %>
</div>

A full walk is too expensive

## Cleaning Up the Captured Data

<div class="code_block">
<div class="code_header">/cleanup-snmp-data.sh</div>
<%= `cat cleanup-snmp-data.sh | grep --invert-match "region" | pygmentize -l bash -f html` %>
</div>

## Collecting the Data

<div class="code_block">
<div class="code_header">/collect-snmp-data.sh</div>
<%= `cat collect-snmp-data.sh | grep --invert-match "region" | pygmentize -l bash -f html` %>
</div>

## Plotting the Data

<div class="code_block">
<div class="code_header">/snmp.R</div>
<%= `cat snmp.R | grep --invert-match "region" | pygmentize -l r -f html` %>
</div>

[<img src="response-times-vs-snmp.scaled.png" />](response-times-vs-snmp.png)

As always, the sources are available via [GitHub](https://github.com/andreassimon/blog-monitoring-snmp).

## References

 - [Net-SNMP](http://www.net-snmp.org/)
 - [SNMP on the German ubuntuusers Wiki](http://wiki.ubuntuusers.de/SNMP)
 - http://www.linux-mag.com/id/1080/
 - http://www.linux-mag.com/id/1054/
 - 

</body>
</html>

<!--
  vim:ft=markdown
-->
